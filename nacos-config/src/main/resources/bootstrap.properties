server.port=8062
#两种Data ID的命名方式
#1.${spring.profiles.active}为空时：${spring.application.name}.${file-extension:properties}
#2.${spring.profiles.active}不为空时：${spring.application.name}-${spring.profiles.active}.${file-extension:properties}
#这个application.name必须跟配置中心的Data ID一致
spring.application.name=nacos-config
spring.cloud.nacos.server-addr=localhost:8850
#无此注解,单纯为了让下面复用,免得改一个要改一群
spring.cloud.nacos.namespace=0351e728-9a7b-4261-9704-0378cde05782
spring.cloud.nacos.discovery.server-addr=${spring.cloud.nacos.server-addr}
#这里可以根据namespace进行权限隔离, 用户nacos-config我配的是权限是config命名空间的,就能拿到相应空间的值
#这个值对应 nacos管理平台-权限管理-资源
spring.cloud.nacos.discovery.namespace=${spring.cloud.nacos.namespace}
spring.cloud.nacos.discovery.username=nacos-config
spring.cloud.nacos.discovery.password=nacos
#nacos的(enabled等)配置建议配置在bootstrap里面,application就不会生效
#spring.cloud.nacos.config.enabled=false
spring.cloud.nacos.config.server-addr=localhost:8850
spring.cloud.nacos.config.namespace=${spring.cloud.nacos.namespace}
spring.cloud.nacos.config.username=nacos-config
spring.cloud.nacos.config.password=nacos
#扩展配置
# ext 优先级大于 shared-configs，在 shared-configs 之后加载
# extension-configs[1] > extension-configs[0]
spring.cloud.nacos.config.extension-configs[0].data-id=ext-config-sv00.properties
spring.cloud.nacos.config.extension-configs[1].data-id=ext-config-sv01.properties
#共享配置
spring.cloud.nacos.config.shared-configs[0].data-id=share-config.properties
#理应是默认一个组,特殊场景也可以去配别的group
spring.cloud.nacos.config.shared-configs[0].group=DEFAULT_GROUP
#管理配置刷新
spring.cloud.nacos.config.shared-configs[0].refresh=true
#以下是配置中心的配置
#nacos-config 主配置
#user.name=config-properties-2
#user.age=72
#ext1
#user.name=ext-sv01-properties
#user.father=ext-sv01D
#ext0
#user.name=ext-sv01-properties
#user.father=ext-sv01D
#user.mother=ext-sv01M
#share
#user.name=share-properties
#user.father=shareD
#user.mother=shareM
#最后读取的配置如下,得到结论
#以优先级最高的配置为准 nacos-config > ext1 > ext0 > share
#{
#    "userFather": "ext-sv01D",
#    "userName": "config-properties-2",
#    "userMother": "ext-sv01M",
#    "userAge": "72"
#}
spring.cloud.sentinel.eager=true
spring.cloud.sentinel.enabled=true
spring.cloud.sentinel.transport.port=8719
#sentinel服务器地址和端口
spring.cloud.sentinel.transport.dashboard=localhost:8070
#当前项目地址，如果sentinel服务器地址和项目地址一致可不填写
#试过clientIp写localhost 管理台不显示服务,但是如果是本地服务 clientIp不写也可以
spring.cloud.sentinel.transport.clientIp=127.0.0.1
#配置数据源 将熔断等信息存储在mysql数据库里,sentinel从nacos那里去加载这些信息
#流控
spring.cloud.sentinel.datasource.flow.nacos.server-addr=${spring.cloud.nacos.server-addr}
spring.cloud.sentinel.datasource.flow.nacos.data-id=${spring.application.name}-flow-rules
spring.cloud.sentinel.datasource.flow.nacos.rule-type=flow
spring.cloud.sentinel.datasource.flow.nacos.group-id=DEFAULT_GROUP
spring.cloud.sentinel.datasource.flow.nacos.username=nacos-config
spring.cloud.sentinel.datasource.flow.nacos.password=nacos
spring.cloud.sentinel.datasource.flow.nacos.namespace=${spring.cloud.nacos.namespace}
#熔断降级
spring.cloud.sentinel.datasource.degrade.nacos.server-addr=${spring.cloud.nacos.server-addr}
spring.cloud.sentinel.datasource.degrade.nacos.data-id=${spring.application.name}-degrade-rules
spring.cloud.sentinel.datasource.degrade.nacos.rule-type=degrade
spring.cloud.sentinel.datasource.degrade.nacos.group-id=DEFAULT_GROUP
spring.cloud.sentinel.datasource.degrade.nacos.username=nacos-config
spring.cloud.sentinel.datasource.degrade.nacos.password=nacos
spring.cloud.sentinel.datasource.degrade.nacos.namespace=${spring.cloud.nacos.namespace}
#将所有可用的监控指标对外暴露
#可以访问 /actuator/sentinel 进行查看sentinel监控项
management.endpoints.web.exposure.include=*
